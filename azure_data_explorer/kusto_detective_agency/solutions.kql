// Challenge 1
Onboarding
| summarize  total_score = sum(Score)
| project total_score



//////////////////////////////////////////////////////////
// Challenge 2

// Check how much the missing book weighs - 1764
Books
| where (book_title == "De Revolutionibus Magnis Data")
| project rf_id, weight_gram

// Calculate the difference between the weight of each shelf and how much it currently weighs
// The shelf with largest difference will be the one the book belongs to
// According to the exercise there is a small margin of error between real weight and measurements so the difference is rarely zero
Shelves 
| mv-expand rf_id = rf_ids to typeof(string) 
| lookup Books on rf_id 
| summarize total_weight = avg(total_weight), current_weight = sum(weight_gram) by shelf = shelf 
| extend weight_difference = total_weight - current_weight
| order by weight_difference desc 
| project shelf, total_weight, current_weight, weight_difference


//////////////////////////////////////////////////////////
// Challenge 3

// let multipleVoters =
// Votes
// | summarize c = count() by voter_hash_id
// | where c > 1
// | project voter_hash_id;
Votes
// | where not(voter_hash_id in (multipleVoters))
// Lots of votes for same candidate from a single machine in less than a minute, so aggegate machine votes at the minute granularity
| extend dt = format_datetime(Timestamp, "yyyy-MM-dd HH:mm")
| summarize c = count() by via_ip, vote, dt
// And keep only the credible votes (filters out e.g. 200+ votes for one candidate in a single machine for a one minute period)
| where c < 50
// Sum votes because they are already aggegated by ip and candidate
| summarize Count = sum(c) by vote
// Rest is provided code by exercise
| as hint.materialized=true T
| extend Total = toscalar(T | summarize sum(Count))
| project vote, Percentage = round(Count*100.0 / Total, 1), Count
| order by Count